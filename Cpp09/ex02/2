/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   PmergeMe.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jperpct <jperpect@student.42porto.com>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/25 08:46:58 by jperpct           #+#    #+#             */
/*   Updated: 2025/07/25 09:12:36 by jperpct          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */



#include "PmergeMe.hpp"
#include <bits/types/__sigset_t.h>
#include <iostream>
#include <iterator>
#include <list>
#include <ostream>
#include <utility>
#include <vector>

int swap_ = 0 ;

void swap(int &v1, int &v2)
{	
	int temp;
	if(v1 > v2)
	{
		swap_++;
		temp = v1;
		v1 = v2;
		v2 = temp;
	}
}


std::vector<int> PmergeMe::binery_sryche(std::vector<int> list, int nb)
{
	std::vector<int> l1;
	std::vector<int> l2;
	int temp;
	if(list.size() == 1 )
	{
		if(nb > list[0])
			list.push_back(nb);
		else
		{
			temp = list[0]; 
			list.clear();
			list.push_back(nb);
			list.push_back(temp);
		}	
			return (list);
	}
	l2.assign(list.begin()+list.size() /2,list.end());	
	l1.assign(list.begin(), list.begin()+list.size() /2);

	if(list.size() > 2 )
	{
//		if(list[list.size() / 2] > nb )
//		binery_sryche(l1, nb);
//		else
	//	binery_sryche(l2, nb);
	}else {
			
	}

	list.clear();
	list.assign(l1.begin(),l1.end());
	list.assign(l2.begin(),l2.end());
	return list;
}

void PmergeMe::organize()
{
	

	std::cout << binery_sryche(_end, 15) << std::endl;
	//organize(_end);
}

std::vector<int> PmergeMe::organize(std::vector<int> list)
{
	int odd;
	std::vector<int> large;
	std::vector<int> smale;	
	if(list.size() % 2 != 0)
	{
		odd = list.back();
		list.pop_back();
	}
	if(list.empty())
	{
		list.push_back(odd);
		return (list);
	}
	for (int i = 0;i < (int)list.size();i+=2)
	{
		swap(list[i],list[i+1]);
		smale.push_back(list[i]);
		large.push_back(list[i+1]);
	}	

	if(smale.size() > 1)
	{
		smale = organize(smale);
	}
	


	std::cout << "smale :"<< smale << std::endl;
	std::cout << "large :"<< large << std::endl;


	return(list);	
}

PmergeMe::PmergeMe(char **argc,int argv)
{
	int n = 10; // quantidade de termos

    // primeiros dois termos
    _fib.push_back(0);
    _fib.push_back(1); 

    // gera os prÃ³ximos
    for (int i = 2; i < n; ++i) {
        _fib.push_back(  _fib[i-1] + _fib[i-2]);
    }


	long int temp;
	std::vector<int>::iterator t;
	if(argv <= 2)
		throw Nb_error();
	for (int i = 1;i < argv; i++)
	{
		temp = std::atol(argc[i]);
		if(i != 1)
		{
			t = std::find(_start.begin(),_start.end(),temp);
			if(t != _start.end())
				throw Nb_error();
		}
		if(temp > INT_MAX || temp < INT_MIN )
			throw Nb_error();
		_start.push_back(temp);
	}
	_end = _start;
	std::cout << "start PmergeMe" << std::endl;
}

PmergeMe::~PmergeMe()
{
	std::cout << "end PmergeMe" << std::endl;
}


PmergeMe::PmergeMe(PmergeMe  const &copy)
{
	_start = copy._start;
	_end = copy._end;
	_fib = copy._fib;
	std::cout << "start copy PmergeMe" << std::endl;
}

PmergeMe &PmergeMe::operator=(PmergeMe const &copy)
{
	if(this == &copy)
		return *this;
	_start = copy._start;
	_end = copy._end;	
	_fib = copy._fib;
	return *this;
}


const char *PmergeMe::Nb_error::what() const throw()
{
	return "the number list not valid";
}

std::ostream& operator<<(std::ostream& os, const std::vector<int> & list)
{
	for (int i = 0;i < (int)list.size(); i++)
	{	
		if(i != 0)
			os <<',' <<    list[i];
		else
			os <<    list[i];
	}
	os << '.';
	return  os;
}
